/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Empleado } from '../models/empleado';
import { empleadosActualizarEmpleadoPut$Json } from '../fn/empleados/empleados-actualizar-empleado-put-json';
import { EmpleadosActualizarEmpleadoPut$Json$Params } from '../fn/empleados/empleados-actualizar-empleado-put-json';
import { empleadosActualizarEmpleadoPut$Plain } from '../fn/empleados/empleados-actualizar-empleado-put-plain';
import { EmpleadosActualizarEmpleadoPut$Plain$Params } from '../fn/empleados/empleados-actualizar-empleado-put-plain';
import { empleadosCrearEmpleadoPost$Json } from '../fn/empleados/empleados-crear-empleado-post-json';
import { EmpleadosCrearEmpleadoPost$Json$Params } from '../fn/empleados/empleados-crear-empleado-post-json';
import { empleadosCrearEmpleadoPost$Plain } from '../fn/empleados/empleados-crear-empleado-post-plain';
import { EmpleadosCrearEmpleadoPost$Plain$Params } from '../fn/empleados/empleados-crear-empleado-post-plain';
import { empleadosEliminarEmpleadoDelete$Json } from '../fn/empleados/empleados-eliminar-empleado-delete-json';
import { EmpleadosEliminarEmpleadoDelete$Json$Params } from '../fn/empleados/empleados-eliminar-empleado-delete-json';
import { empleadosEliminarEmpleadoDelete$Plain } from '../fn/empleados/empleados-eliminar-empleado-delete-plain';
import { EmpleadosEliminarEmpleadoDelete$Plain$Params } from '../fn/empleados/empleados-eliminar-empleado-delete-plain';
import { empleadosListarEmpleadosGet$Json } from '../fn/empleados/empleados-listar-empleados-get-json';
import { EmpleadosListarEmpleadosGet$Json$Params } from '../fn/empleados/empleados-listar-empleados-get-json';
import { empleadosListarEmpleadosGet$Plain } from '../fn/empleados/empleados-listar-empleados-get-plain';
import { EmpleadosListarEmpleadosGet$Plain$Params } from '../fn/empleados/empleados-listar-empleados-get-plain';

@Injectable({ providedIn: 'root' })
export class EmpleadosService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `empleadosCrearEmpleadoPost()` */
  static readonly EmpleadosCrearEmpleadoPostPath = '/Empleados/CrearEmpleado';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `empleadosCrearEmpleadoPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  empleadosCrearEmpleadoPost$Plain$Response(params?: EmpleadosCrearEmpleadoPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Empleado>> {
    return empleadosCrearEmpleadoPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `empleadosCrearEmpleadoPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  empleadosCrearEmpleadoPost$Plain(params?: EmpleadosCrearEmpleadoPost$Plain$Params, context?: HttpContext): Observable<Empleado> {
    return this.empleadosCrearEmpleadoPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Empleado>): Empleado => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `empleadosCrearEmpleadoPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  empleadosCrearEmpleadoPost$Json$Response(params?: EmpleadosCrearEmpleadoPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Empleado>> {
    return empleadosCrearEmpleadoPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `empleadosCrearEmpleadoPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  empleadosCrearEmpleadoPost$Json(params?: EmpleadosCrearEmpleadoPost$Json$Params, context?: HttpContext): Observable<Empleado> {
    return this.empleadosCrearEmpleadoPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Empleado>): Empleado => r.body)
    );
  }

  /** Path part for operation `empleadosActualizarEmpleadoPut()` */
  static readonly EmpleadosActualizarEmpleadoPutPath = '/Empleados/ActualizarEmpleado';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `empleadosActualizarEmpleadoPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  empleadosActualizarEmpleadoPut$Plain$Response(params?: EmpleadosActualizarEmpleadoPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Empleado>> {
    return empleadosActualizarEmpleadoPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `empleadosActualizarEmpleadoPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  empleadosActualizarEmpleadoPut$Plain(params?: EmpleadosActualizarEmpleadoPut$Plain$Params, context?: HttpContext): Observable<Empleado> {
    return this.empleadosActualizarEmpleadoPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Empleado>): Empleado => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `empleadosActualizarEmpleadoPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  empleadosActualizarEmpleadoPut$Json$Response(params?: EmpleadosActualizarEmpleadoPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Empleado>> {
    return empleadosActualizarEmpleadoPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `empleadosActualizarEmpleadoPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  empleadosActualizarEmpleadoPut$Json(params?: EmpleadosActualizarEmpleadoPut$Json$Params, context?: HttpContext): Observable<Empleado> {
    return this.empleadosActualizarEmpleadoPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Empleado>): Empleado => r.body)
    );
  }

  /** Path part for operation `empleadosEliminarEmpleadoDelete()` */
  static readonly EmpleadosEliminarEmpleadoDeletePath = '/Empleados/EliminarEmpleado';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `empleadosEliminarEmpleadoDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  empleadosEliminarEmpleadoDelete$Plain$Response(params?: EmpleadosEliminarEmpleadoDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Empleado>> {
    return empleadosEliminarEmpleadoDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `empleadosEliminarEmpleadoDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  empleadosEliminarEmpleadoDelete$Plain(params?: EmpleadosEliminarEmpleadoDelete$Plain$Params, context?: HttpContext): Observable<Empleado> {
    return this.empleadosEliminarEmpleadoDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Empleado>): Empleado => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `empleadosEliminarEmpleadoDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  empleadosEliminarEmpleadoDelete$Json$Response(params?: EmpleadosEliminarEmpleadoDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Empleado>> {
    return empleadosEliminarEmpleadoDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `empleadosEliminarEmpleadoDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  empleadosEliminarEmpleadoDelete$Json(params?: EmpleadosEliminarEmpleadoDelete$Json$Params, context?: HttpContext): Observable<Empleado> {
    return this.empleadosEliminarEmpleadoDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Empleado>): Empleado => r.body)
    );
  }

  /** Path part for operation `empleadosListarEmpleadosGet()` */
  static readonly EmpleadosListarEmpleadosGetPath = '/Empleados/ListarEmpleados';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `empleadosListarEmpleadosGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  empleadosListarEmpleadosGet$Plain$Response(params?: EmpleadosListarEmpleadosGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Empleado>> {
    return empleadosListarEmpleadosGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `empleadosListarEmpleadosGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  empleadosListarEmpleadosGet$Plain(params?: EmpleadosListarEmpleadosGet$Plain$Params, context?: HttpContext): Observable<Empleado> {
    return this.empleadosListarEmpleadosGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Empleado>): Empleado => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `empleadosListarEmpleadosGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  empleadosListarEmpleadosGet$Json$Response(params?: EmpleadosListarEmpleadosGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Empleado>> {
    return empleadosListarEmpleadosGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `empleadosListarEmpleadosGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  empleadosListarEmpleadosGet$Json(params?: EmpleadosListarEmpleadosGet$Json$Params, context?: HttpContext): Observable<Empleado> {
    return this.empleadosListarEmpleadosGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Empleado>): Empleado => r.body)
    );
  }

}
